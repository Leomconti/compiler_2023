options {
    STATIC = false;

}

PARSER_BEGIN(Compiler)
package com.example.compiler_testes;


public class Compiler {
    public static void main(String[] args) {
    }


    public void handleError(ParseException e, String rule) {
        int line = e.currentToken.next.beginLine;
        int column = e.currentToken.next.beginColumn;
        String found = e.currentToken.next.image;

        String formattedError = formatPrint(rule, line, column, found, "Expected_Token", "Syntax Error");

        }

    public String formatPrint(String rule, int line, int column, String found, String expected, String msg){
        StringBuilder output = new StringBuilder();
        output.append("Rule: ").append(rule).append("\n");
        output.append("Syntax Error: Line ").append(line).append(", Column ").append(column).append("\n");
        output.append("Encountered: ").append(found).append("\n");
        output.append("Expected: ").append(expected).append("\n");
        output.append("Message: ").append(msg).append("\n");
        System.err.println(output.toString());
        return output.toString();
    }
}

PARSER_END(Compiler)

// Aqui eh lexico
TOKEN_MGR_DECLS :
{
    String erroLexico = "";
    int countLexErrors = 0;

    public String getErroLexico() {
        return erroLexico;
    }

    public int foundLexErrors() {
        return countLexErrors;
    }

    void CommentError()
        {
            System.err.println("Error: Multiline comment not closed.");
        }
}

SKIP :
{
    " " | "\t" | "\n" | "\r"
    | "/*" : multilinecomment
    | "//" : singlelinecomment
}

<singlelinecomment> SKIP :
{
    <["\n", "\r"]>: DEFAULT
|    < ~[] >
}

<multilinecomment> SKIP :
{
    "*/": DEFAULT
|   < ~[] >
}

// Palavras reservadas
TOKEN :

{
    < IDENTIFICADOR: <MAIUSCULA> (<DIGITOS> <FIM>)? ((<_DIGITO> | <LETRA> (<DIGITOS>)? | <_LETRA> (<DIGITOS>)?)* <FIM>)? >
|   < RESULT: "result" >
|   < AVALIATE: "avaliate" >
|   < DO: "do" >
|   < THIS: "this" >
|   < BODY: "body" >
|   < DESCRIPTION: "description" >
|   < DECLARATION: "declaration" >
|   < TYPE: "type" >
|   < IS: "is" >
|   < CONSTANT: "constant" >
|   < AND: "and" >
|   < VARIABLE: "variable" >
|   < DESIGNATE: "designate" >
|   < AS: "as" >
|   < READ: "read" >
|   < WRITE: "write" >
|   < ALL: "all" >
|   < REPEAT: "repeat" >
|   < INTEGER_DEF: "integer" >
|   < REAL_DEF: "real" >
|   < LITERAL_DEF: "literal" >
|   < LOGIC_DEF: "logic" >
}

// indentificador valores
TOKEN :
{
    < #DIGITOS: <DIGITO> (<DIGITO>)? >
|   < #FIM: <_LETRA> | <LETRA> | "_" >
|   < #_DIGITO: "_" <DIGITOS> >
|   < #_LETRA: "_" (<LETRA>)+  >
}


// Valores
TOKEN :
{
    < INTEGER: <DIGITO> | <DIGITO> <DIGITO> | <DIGITO> <DIGITO> <DIGITO> >
|   < REAL:  (<INTEGER> | <DIGITO> <DIGITO> <DIGITO> <DIGITO> <DIGITO> | <DIGITO> <DIGITO> <DIGITO> <DIGITO>) "." <INTEGER> >
|   < TRUE: "true">
|   < UNTRUE: "untrue">
|   < LITERAL: ("\"" ( <ASCII_ASPAS> )* "\"") | "\'" ( <ASCII_APOSTROFO> )* "\'" >
}

// Operadores aritmeticos
TOKEN :
{
    < PLUS: "+" >
|   < MINUS: "-" >
|   < MULTIPLY: "*" >
|   < DIVIDE: "/" >
|   < POWER: "**" >
|   < MODULO: "%" >
|   < DOUBLE_MODULO: "%%" >
}

// Relational Operators
TOKEN :
{
    < LESS_THAN: "<<" >
|   < LESS_THAN_EQUAL: "<<=" >
|   < GREATER_THAN_EQUAL: ">>=" >
|   < GREATER_THAN: ">>" >
|   < EQUAL: "==" >
|   < NOT_EQUAL: "!=" >
}

// Operadores logicos
TOKEN :
{
    < AND_LOGIC: "&" >
|   < OR_LOGIC: "|" >
|   < NOT_LOGIC: "!" >
}

// Caracteres Especiais
TOKEN :
{
    < HASH: "#" >
|   < DOLLAR: "$" >
|   < OPEN_PAREN: "(" >
|   < CLOSE_PAREN: ")" >
|   < COMMA: "," >
|   < DOT: "." >
|   < COLON: ":" >
|   < SEMICOLON: ";" >
|   < S_LESS_THAN: "<" >
|   < S_GREATER_THAN: ">" >
|   < QUESTION_MARK: "?" >
|   < AT_SIGN: "@" >
|   < OPEN_BRACKET: "[" >
|   < CLOSE_BRACKET: "]" >
|   < BACKTICK: "`" >
|   < OPEN_BRACE: "{" >
|   < CLOSE_BRACE: "}" >
|   < TILDE: "~" >
|   < EQUALS: "=" >
}

// Auxiliares
TOKEN :
{
    < #MAIUSCULA: ["A"-"Z"] >
|   < #MINUSCULA: ["a"-"z"] >
|   < #DIGITO: ["0"-"9"] >
|   < #LETRA: <MAIUSCULA> | <MINUSCULA> >
|   < #ASCII_ASPAS: ["\u0000" - "\u0021"] | ["\u0023" - "\u007F"] >
|   < #ASCII_APOSTROFO: ["\u0000" - "\u0026"] | ["\u0028" - "\u007F"] >
}

// Erros
SPECIAL_TOKEN :
{
    < INVALID_LEXICAL : (~ ["a"-"z", "A"-"Z", "0"-"9"," ","\t","\n","\r","\f","\'", "\"","+", "-", "*", "/", "%","<", ">", "=", ".", ",", ";", "(", ")", "[", "]", "{", "}"])+>
   {System.err.println("Line: " + input_stream.getEndLine() + " Column: " + input_stream.getEndColumn() + " Invalid string found: " + image);
    countLexErrors++;
    }
|  <INVALID_CONST: "\"" (~ ["\n", "\r", "\""])* ["\n", "\r"]>
    {System.err.println("Line: " + input_stream.getEndLine() + " Column: " + input_stream.getEndColumn() + " String constatnt has a \\n: " + image);
     countLexErrors++;
     }
}
    //{erroLexico += "Erro! Caractere inválido. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;}
// Palavras reservadas

// Valores
SPECIAL_TOKEN :
{
    < ERROR_INTEGER: <DIGITO> <DIGITO> <DIGITO> (<DIGITO>)+ >
    {erroLexico += "\nErro! Limite de dígitos para uma constante inteira = 3. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;
    countLexErrors++;
    }

|   < ERROR_REAL:  <DIGITO> <DIGITO> <DIGITO> <DIGITO> <DIGITO> (<DIGITO>)+ "." <INTEGER> >
    {erroLexico += "\nErro! Mais de 5 dígitos antes do ponto. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
}

|   < ERROR_LITERAL_END: "\"" ( <ASCII_ASPAS> )* | "\'" (<ASCII_APOSTROFO>)* >
    {erroLexico += "\nErro! Literal sem aspas de fechamento. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
}
}

SPECIAL_TOKEN :
{
    < ERROR_IDENTIFICADOR: <MAIUSCULA> ((<DIGITO>)+ (("_") | (<LETRA>)+("_")?)+)* >
    {erroLexico += "\nErro! Identificador com muitos dígitos. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
}

|   < ERROR_IDENTIFICADOR_START_DIGIT: <DIGITO> (<LETRA> | <DIGITO> | "_")+ >
    {erroLexico += "\nErro! Identificador começando com dígito. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
}

|   < ERROR_IDENTIFICADOR_MULTIPLE_UNDERSCORES: <MAIUSCULA> ((<LETRA> | <DIGITO>)* "__" (<LETRA> | <DIGITO> | "_")*)+ >
    {erroLexico += "\nErro! Identificador com múltiplos underscores consecutivos. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
}

|   < ERROR_IDENTIFICADOR_END_UNDERSCORE: <MAIUSCULA> ((<LETRA> | <DIGITO>)+ "_")+ >
    {erroLexico += "\nErro! Identificador terminando com underscore. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
}

|   < ERROR_IDENTIFICADOR_START_LOWERCASE: <MINUSCULA> ((<LETRA> | <DIGITO> | "_")+)* >
    {erroLexico += "\nErro! Identificador começando com letra minúscula. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
}
}

void programa(): {} {
    try {
        <DO> < THIS > < IDENTIFICADOR > < OPEN_BRACKET > < CLOSE_BRACKET > DeclarationOrNothing() < BODY > < OPEN_BRACKET > ListaComandos() < CLOSE_BRACKET > FinalPrograma()
    } catch (ParseException e) {
        handleError(e, "programa");
    }
}

void FinalPrograma(): {} {
    try {
        ( < DESCRIPTION > < LITERAL > ) ?
    } catch (ParseException e) {
        handleError(e, "FinalPrograma");
    }
}

void Atribuicao(): {}{
    try {
        <DESIGNATE > < THIS > ListaDeIdentificadores() < AS > Expressao()
    } catch (ParseException e) {
        handleError(e, "atribuicao");
    }
}

void Entrada(): {} {
    try {
        <READ > < THIS > < OPEN_BRACKET > ListaDeIdentificadores() < CLOSE_BRACKET >
    } catch (ParseException e) {
        handleError(e, "entrada");
    }
}

void Saida(): {} {
    try {
        Write() < OPEN_BRACKET > listaIdentificadorConstante() < CLOSE_BRACKET >
    } catch (ParseException e) {
        handleError(e, "saida");
    }
}

void listaIdentificadorConstante(): {} {
 (<IDENTIFICADOR> |  ConstantValue()) adicionalIdentificadorConstante()
}

void ConstantValue():{}{
    <INTEGER> | <REAL> | <LITERAL>
}

void adicionalIdentificadorConstante(): {} {
    try {
        (<COMMA> listaIdentificadorConstante())?
    } catch (ParseException e) {
        handleError(e, "ListaDeIdentificadoresAdicional");
    }
}

void Write(): {} {
    try {
        <WRITE > Write_()
    } catch (ParseException e) {
        handleError(e, "write");
    }
}

void Write_(): {} {
    try {
        <ALL > < THIS > | < THIS >
    } catch (ParseException e) {
        handleError(e, "write_");
    }
}


void Selecao(): {} {
    try {
        <AVALIATE > < THIS > Expressao() (TrueUntrueResult() | UntrueTrueResult())
    } catch (ParseException e) {
        handleError(e, "selecao");
    }
}

void trueResult(): {} {
    try {
        < TRUE > < RESULT > < OPEN_BRACKET > ListaComandos() < CLOSE_BRACKET >
    }catch (ParseException e) {
        handleError(e, "TrueResult");
    }
}

void UntrueResult(): {} {
   try {
        < UNTRUE > < RESULT > < OPEN_BRACKET > ListaComandos() < CLOSE_BRACKET >
   }catch (ParseException e) {
       handleError(e, "TrueResult");
   }
}

void TrueUntrueResult(): {} {
    try {
        trueResult() (UntrueResult())?
    }catch (ParseException e) {
        handleError(e, "TrueResult");
    }
}

void UntrueTrueResult(): {} {
    try {
        UntrueResult() (trueResult())?
    }catch (ParseException e) {
        handleError(e, "UntrueTrueResult");
    }
}

void Comando(): {} {
    try {
        Atribuicao() | Entrada() | Saida() | Selecao() | Repeticao()
    } catch (ParseException e) {
        handleError(e, "comando");
    }
}

void ListaComandos(): {} {
    try {
        Comando() < DOT > ComandoAdicional()
    } catch (ParseException e) {
        handleError(e, "listaComandos");
    }
}

void ComandoAdicional(): {} {
    try {
        (ListaComandos()) ?
    } catch (ParseException e) {
        handleError(e, "ComandoAdicional");
    }
}


void Repeticao(): {} {
    try {
        <
        REPEAT > < THIS > Expressao() < OPEN_BRACKET > ListaComandos() < CLOSE_BRACKET >
    } catch (ParseException e) {
        handleError(e, "repeticao");
    }
}

void Expressao(): {} {
    try {
        ExpressaoAritOuLogica() Expressao_()
    } catch (ParseException e) {
        handleError(e, "expressao");
    }
}

// the [] means that the token is optional, sooo, it's basically the OR Episolon
void Expressao_(): {} {
    try {
        [ <
            EQUAL > ExpressaoAritOuLogica() |
            < NOT_EQUAL > ExpressaoAritOuLogica() |
            < LESS_THAN > ExpressaoAritOuLogica() |
            < GREATER_THAN > ExpressaoAritOuLogica() |
            < LESS_THAN_EQUAL > ExpressaoAritOuLogica() |
            < GREATER_THAN_EQUAL > ExpressaoAritOuLogica()
        ]
    } catch (ParseException e) {
        handleError(e, "expressao_");
    }

}

void ExpressaoAritOuLogica(): {} {
    try {
        Termo2() MenorPrioridade()
    } catch (ParseException e) {
        handleError(e, "ExpressaoAritOuLogica");
    }
}

void MenorPrioridade(): {} {
        [ <
            PLUS > Termo2() MenorPrioridade() |
            < MINUS > Termo2() MenorPrioridade() |
            < OR_LOGIC > Termo2() MenorPrioridade()
        ]
}

void Termo2(): {} {
        Termo1() MediaPrioridade()
}

void MediaPrioridade(): {} {
             < MULTIPLY> Termo1() MediaPrioridade()
           | < DIVIDE> Termo1() MediaPrioridade()
           | < MODULO> Termo1() MediaPrioridade()
           | < AND > Termo1() MediaPrioridade()
           | < OR_LOGIC> Termo1() MediaPrioridade()
}

void Termo1(): {} {
        Elemento() MaiorPrioridade()
}

void MaiorPrioridade(): {} {
        [ <POWER > Elemento() MaiorPrioridade() ]
}

void Elemento(): {} {
    try {
          < IDENTIFICADOR> Indice()
        | < INTEGER>
        | < REAL >
        | < LITERAL >
        | < TRUE >
        | < UNTRUE>
        | <OPEN_PAREN> Expressao() <CLOSE_PAREN>
        | <NOT_LOGIC> <OPEN_PAREN> Expressao() <CLOSE_PAREN>
    } catch (ParseException e) {
        handleError(e, "Elemento");
    }
}

void Indice(): {} {
        [ < OPEN_BRACE > Expressao() < CLOSE_BRACE > ]
}

void DeclarationOrNothing():{}{
    try{
       (<DECLARATION> Declaration_Enumerado_E_ConstAndVars())?
    }catch (ParseException e){
        handleError(e, "DeclarationOrNothing");
    }
}


void Declaration_Enumerado_E_ConstAndVars(): {} {
    try {
        EnumeradoEouVars() | ConstAndVarsOnly()
    } catch (ParseException e) {
        handleError(e, "Declaration_Enumerado_E_ConstAndVars");
    }
}

void declEnumerado(): {}{
    <IDENTIFICADOR> <IS> <OPEN_BRACE> ListaDeIdentificadores() <CLOSE_BRACE> <DOT>
}

void EnumeradoEouVars(): {} {
    try {
        <TYPE> <OPEN_BRACKET> declEnumerado() <CLOSE_BRACKET> (<DECLARATION> ConstAndVarsOnly())?
    } catch (ParseException e) {
        handleError(e, "EnumeradoEouVars");
    }
}

void ConstAndVarsOnly(): {} {
    try {
        <CONSTANT> <AND> <VARIABLE> <OPEN_BRACKET> ConstAndVarsOuVarsAndConstOuVarsOuConst() <CLOSE_BRACKET>
    } catch (ParseException e) {
        handleError(e, "ConstAndVarsOnly");
    }
}

void ConstAndVarsOuVarsAndConstOuVarsOuConst(): {} {
    try {
        (<AS> (<CONSTANT> ConstAndVars() | <VARIABLE> VarsAndConst()) )
    } catch (ParseException e) {
        handleError(e, "ConstAndVarsOuVarsAndConstOuVarsOuConst");
    }
}

void Vars(): {} {
    ListaDeIdentificadores() <IS> TipoVariavel()  <DOT> VarsAdicional()
}

void VarsAdicional(): {} {
    try {
        (Vars())?
    } catch (ParseException e) {
        handleError(e, "VarsAdicional");
    }
}

void Const(): {} {
     ListaDeIdentificadores() <IS> ConstanteMatchValor() <DOT> ConstAdicional()
}

void ConstAdicional(): {} {
    try {
        (Const())?
    } catch (ParseException e) {
        handleError(e, "ConstAdicional");
    }
}

void ConstAndVars(): {} {
    try {
        Const() (<AS> <VARIABLE> Vars())?
    } catch (ParseException e) {
        handleError(e, "ConstAndVars");
    }
}

void VarsAndConst(): {} {
    try {
        Vars() (<AS> <CONSTANT> Const())?
    } catch (ParseException e) {
        handleError(e, "VarsAndConst");
    }
}

void ConstanteMatchValor(): {} {
    try {
        <INTEGER_DEF> <EQUALS> <INTEGER> | <REAL_DEF> <EQUALS> <REAL> | <LITERAL_DEF> <EQUALS> <LITERAL>
    } catch (ParseException e) {
        handleError(e, "TipoConstante");
    }
}

void TipoVariavel(): {} {
    try {
        <INTEGER_DEF> | <REAL_DEF> | <LITERAL_DEF> | <LOGIC_DEF>
    } catch (ParseException e) {
        handleError(e, "TipoVariavel");
    }
}

void ListaDeIdentificadores(): {} {
 <IDENTIFICADOR> ListaDeIdentificadoresAdicional()
}

void ListaDeIdentificadoresAdicional(): {} {
    try {
        (<COMMA> ListaDeIdentificadores())?
    } catch (ParseException e) {
        handleError(e, "ListaDeIdentificadoresAdicional");
    }
}

