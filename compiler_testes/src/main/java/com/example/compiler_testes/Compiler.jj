options {
    STATIC = false;

}

PARSER_BEGIN(Compiler)
package com.example.compiler_testes;


public class Compiler {
    public static void main(String[] args) {
        // Test the lexer here

    }
}

PARSER_END(Compiler)

TOKEN_MGR_DECLS :
{
    String erroLexico = "";
    int countLexErrors = 0;
    String errorSintatico = "";


    public String getErroLexico() {
        return erroLexico;
    }

    public int foundLexErrors() {
        return countLexErrors;
    }

    void CommentError()
        {
            System.err.println("Error: Multiline comment not closed.");
        }
}

SKIP :
{
    " " | "\t" | "\n" | "\r"
    | "/*" : multilinecomment
    | "//" : singlelinecomment
}

<singlelinecomment> SKIP :
{
    <["\n", "\r"]>: DEFAULT
|    < ~[] >
}

<multilinecomment> SKIP :
{
    "*/": DEFAULT
|   < ~[] >
}

// Palavras reservadas
TOKEN :

{
    < IDENTIFICADOR: <MAIUSCULA> (<DIGITOS> <FIM>)? ((<_DIGITO> | <LETRA> (<DIGITOS>)? | <_LETRA> (<DIGITOS>)?)* <FIM>)? >
|   < RESULT: "result" >
|   < AVALIATE: "avaliate" >
|   < DO: "do" >
|   < THIS: "this" >
|   < BODY: "body" >
|   < DESCRIPTION: "description" >
|   < DECLARATION: "declaration" >
|   < TYPE: "type" >
|   < IS: "is" >
|   < CONSTANT: "constant" >
|   < AND: "and" >
|   < VARIABLE: "variable" >
|   < DESIGNATE: "designate" >
|   < AS: "as" >
|   < READ: "read" >
|   < WRITE: "write" >
|   < ALL: "all" >
|   < REPEAT: "repeat" >
|   < INTEGER_DEF: "integer" >
|   < REAL_DEF: "real" >
|   < LITERAL_DEF: "literal" >
|   < LOGIC_DEF: "logic" >
}

// indentificador valores
TOKEN :
{
    < DIGITOS: <DIGITO> (<DIGITO>)? >
|   < FIM: <_LETRA> | <LETRA> | "_" >
|   < _DIGITO: "_" <DIGITOS> >
|   < _LETRA: "_" (<LETRA>)+  >
}


// Valores
TOKEN :
{
    < INTEGER: <DIGITO> | <DIGITO> <DIGITO> | <DIGITO> <DIGITO> <DIGITO> >
|   < REAL:  (<INTEGER> | <DIGITO> <DIGITO> <DIGITO> <DIGITO> <DIGITO> | <DIGITO> <DIGITO> <DIGITO> <DIGITO>) "." <INTEGER> >
|   < TRUE: "true">
|   < UNTRUE: "untrue">
|   < LITERAL: ("\"" ( <ASCII_ASPAS> )* "\"") | "\'" ( <ASCII_APOSTROFO> )* "\'" >
}

// Operadores aritmeticos
TOKEN :
{
    < PLUS: "+" >
|   < MINUS: "-" >
|   < MULTIPLY: "*" >
|   < DIVIDE: "/" >
|   < POWER: "**" >
|   < MODULO: "%" >
|   < DOUBLE_MODULO: "%%" >
}

// Relational Operators
TOKEN :
{
    < LESS_THAN: "<<" >
|   < LESS_THAN_EQUAL: "<<=" >
|   < GREATER_THAN_EQUAL: ">>=" >
|   < GREATER_THAN: ">>" >
|   < EQUAL: "==" >
|   < NOT_EQUAL: "!=" >
}

// Operadores logicos
TOKEN :
{
    < AND_LOGIC: "&" >
|   < OR_LOGIC: "|" >
|   < NOT_LOGIC: "!" >
}

// Caracteres Especiais
TOKEN :
{
    < HASH: "#" >
|   < DOLLAR: "$" >
|   < OPEN_PAREN: "(" >
|   < CLOSE_PAREN: ")" >
|   < COMMA: "," >
|   < DOT: "." >
|   < COLON: ":" >
|   < SEMICOLON: ";" >
|   < S_LESS_THAN: "<" >
|   < S_GREATER_THAN: ">" >
|   < QUESTION_MARK: "?" >
|   < AT_SIGN: "@" >
|   < OPEN_BRACKET: "[" >
|   < CLOSE_BRACKET: "]" >
|   < BACKTICK: "`" >
|   < OPEN_BRACE: "{" >
|   < CLOSE_BRACE: "}" >
|   < TILDE: "~" >
|   < EQUALS: "=" >
}

// Auxiliares
TOKEN :
{
    < #MAIUSCULA: ["A"-"Z"] >
|   < #MINUSCULA: ["a"-"z"] >
|   < #DIGITO: ["0"-"9"] >
|   < #LETRA: <MAIUSCULA> | <MINUSCULA> >
|   < #ASCII: ["\u0000" - "\u007F"] >
|   < #ASCII_ASPAS: ["\u0000" - "\u0021"] | ["\u0023" - "\u007F"] >
|   < #ASCII_APOSTROFO: ["\u0000" - "\u0026"] | ["\u0028" - "\u007F"] >
|   < #DENTROSEMLINHA: ["\u0000" - "\u0009", "\u000B" - "\u007F"] >  // tabela ascii sem o \n (quebra de linha, vulgo final)
|   < #SEM_ESTRELA: ["\u0000"-"\u0029"] | ["\u002B"-"\uFFFF"] >  // ascii sem estrela
|   < #SEM_BARRA: ["\u0000"-"\u002E"] | ["\u0030"-"\uFFFF"] >  // ascci sem a barra (para nao poder colocar estrela e barra e contar como inside do texto ali )
}

// Erros
SPECIAL_TOKEN :
{
    < INVALID_LEXICAL : (~ ["a"-"z", "A"-"Z", "0"-"9"," ","\t","\n","\r","\f","\'", "\"","+", "-", "*", "/", "%","<", ">", "=", ".", ",", ";", "(", ")", "[", "]", "{", "}"])+>
   {System.err.println("Line: " + input_stream.getEndLine() + " Column: " + input_stream.getEndColumn() + " Invalid string found: " + image);
    countLexErrors++;
    }
|  <INVALID_CONST: "\"" (~ ["\n", "\r", "\""])* ["\n", "\r"]>
    {System.err.println("Line: " + input_stream.getEndLine() + " Column: " + input_stream.getEndColumn() + " String constatnt has a \\n: " + image);
     countLexErrors++;
     }
}
    //{erroLexico += "Erro! Caractere inválido. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;}
// Palavras reservadas

// Valores
SPECIAL_TOKEN :
{
    < ERROR_INTEGER: <DIGITO> <DIGITO> <DIGITO> (<DIGITO>)+ >
    {erroLexico += "\nErro! Limite de dígitos para uma constante inteira = 3. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;}

|   < ERROR_REAL:  <DIGITO> <DIGITO> <DIGITO> <DIGITO> <DIGITO> (<DIGITO>)+ "." <INTEGER> >
    {erroLexico += "\nErro! Mais de 5 dígitos antes do ponto. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;}

|   < ERROR_LITERAL_END: "\"" ( <ASCII_ASPAS> )* | "\'" (<ASCII_APOSTROFO>)* >
    {erroLexico += "\nErro! Literal sem aspas de fechamento. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;}
}

SPECIAL_TOKEN :
{
    < ERROR_IDENTIFICADOR: <MAIUSCULA> ((<DIGITO>)+ (("_") | (<LETRA>)+("_")?)+)* >
    {erroLexico += "\nErro! Identificador com muitos dígitos. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;}

|   < ERROR_IDENTIFICADOR_START_DIGIT: <DIGITO> (<LETRA> | <DIGITO> | "_")+ >
    {erroLexico += "\nErro! Identificador começando com dígito. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;}

|   < ERROR_IDENTIFICADOR_MULTIPLE_UNDERSCORES: <MAIUSCULA> ((<LETRA> | <DIGITO>)* "__" (<LETRA> | <DIGITO> | "_")*)+ >
    {erroLexico += "\nErro! Identificador com múltiplos underscores consecutivos. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;}

|   < ERROR_IDENTIFICADOR_START_LOWERCASE: <MINUSCULA> ((<LETRA> | <DIGITO> | "_")+)* >
    {erroLexico += "\nErro! Identificador começando com letra minúscula. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;}
}

void programa():{}
{
    <DO> <THIS> <IDENTIFICADOR> <OPEN_BRACKET><CLOSE_BRACKET> combinedEnumAndConst() <BODY> <OPEN_BRACKET>listaComandos()<CLOSE_BRACKET> finalPrograma()
}

void finalPrograma():{}
{
    (<DESCRIPTION> <LITERAL>)?
}

void combinedEnumAndConst():{}
{
    <DECLARATION> (enumeradoeouVars() | constAndVarsOnly())
}

void enumeradoeouVars():{}
{
    <TYPE> <OPEN_BRACKET> lista_de_identificadores() <CLOSE_BRACKET> <DOT> (<DECLARATION> constAndVarsOnly())?
}

void constAndVarsOnly():{}
{
    <CONSTANT> <AND> <VARIABLE> <OPEN_BRACKET> cV() <CLOSE_BRACKET> <DOT>
}


void atribuicao():{}
{
    <DESIGNATE> <THIS> listaIdent() <AS> expressao()
}

void saida():{}
{
    <WRITE> <OPEN_BRACKET> listaIdentConst() <CLOSE_BRACKET> <DOT>
}

void write():{}
{
    <WRITE> write_()
}

void write_():{}
{
    <ALL> <THIS> | <THIS>
}

void entrada():{}
{
    <READ> <THIS> <OPEN_BRACKET> listaIdent() <CLOSE_BRACKET> <DOT>
}

void selecao():{}
{
    <AVALIATE> <THIS> expressao() <TRUE> <RESULT> <OPEN_BRACKET> listaComandos() <CLOSE_BRACKET> <UNTRUE> <RESULT> <OPEN_BRACKET> listaComandos() <CLOSE_BRACKET>
}

void comando():{}
{
    atribuicao() | entrada() | saida() |selecao() | repeticao()
}

void listaComandos():{}
{
    comando() comando_adicional()
}

void comando_adicional():{}
{
    (listaComandos())?
}

void as_contant():{}
{
    listaIdent() <IS> tipo_constante() <EQUALS> valor()
}

void as_variavel():{}
{
    listaIdent() <IS> tipo_variavel()
}

void tipo_constante():{}
{
    <INTEGER_DEF> | <REAL_DEF> | <LITERAL_DEF> | <LOGIC_DEF>
}

void tipo_variavel():{}
{
    <INTEGER_DEF> | <REAL_DEF> | <LITERAL_DEF> | <LOGIC_DEF>
}

void valor():{}
{
    <CONSTANT> valor_()
}

void valor_():{}
{
    <INTEGER_DEF> | <REAL_DEF> | <LITERAL_DEF>
}

void listaIdentsC():{}
{
    <IDENTIFICADOR> identCont()
}

void identCont():{}
{
    (<COMMA>listaIdentsC())?
}

void listaIdent():{}
{
    <IDENTIFICADOR> tId() contId()
}

void tId():{}
{
    (<OPEN_BRACE> <CONSTANT> <INTEGER_DEF> <CLOSE_BRACE>)?
}

void contId():{}
{
    (listaIdent())?
}

void listaIdentConst():{}
{
    listaIdentConstI() <DOT> iCCont()
}

void listaIdentConstI():{}
{
    listaIdent() | <CONSTANT>
}

void iCCont():{}
{
    (listaIdentConst())?
}

void lista_de_identificadores():{}
{
    <IDENTIFICADOR> <IS>  <OPEN_BRACE> listaIdent() <CLOSE_BRACE> isCont()
}

void isCont():{}
{
    (lista_de_identificadores())?
}

void repeticao():{}
{
    <REPEAT> <THIS> expressao() <OPEN_BRACKET> listaComandos() <CLOSE_BRACKET>
}

void cV():{}
{
    <AS> cV_()
}

void cV_(): {}
{
    <CONSTANT> as_contant() contCV() | <VARIABLE> as_variavel()
}

void contCV():{}
{
    (<AS> <VARIABLE> as_variavel())?
}

void expressao():
{}
{
    expressaoAritOuLogica() expressao_()
}

// the [] means that the token is optional, sooo, it's basically the OR Episolon
void expressao_():{}
{
    [
      <EQUAL> expressaoAritOuLogica()
    | <NOT_EQUAL> expressaoAritOuLogica()
    | <LESS_THAN> expressaoAritOuLogica()
    | <GREATER_THAN>  expressaoAritOuLogica()
    | <LESS_THAN_EQUAL> expressaoAritOuLogica()
    | <GREATER_THAN_EQUAL> expressaoAritOuLogica()
    ]
}

void expressaoAritOuLogica():{}
{
    termo2() menorPrioridade()
}

void menorPrioridade():{}
{
    [
      <PLUS> termo2() menorPrioridade()
    | <MINUS> termo2() menorPrioridade()
    | <OR_LOGIC> termo2() menorPrioridade()
    ]
}


void termo2():{}
{
    termo1() mediaPrioridade()
}

void mediaPrioridade():{}
{
      < MULTIPLY> termo1() mediaPrioridade()
    | < DIVIDE> termo1() mediaPrioridade()
    | < MODULO> termo1() mediaPrioridade()
    | < AND > termo1() mediaPrioridade()
    | < OR_LOGIC> termo1() mediaPrioridade()
}

void termo1():{}
{
    elemento() maiorPrioridade()
}

void maiorPrioridade(): {}
{
[
    < POWER > elemento() maiorPrioridade()
]
}

void elemento():{}
{
      < IDENTIFICADOR> indice()
    | < INTEGER>
    | < REAL >
    | < LITERAL >
    | < TRUE >
    | < UNTRUE>
    | <OPEN_PAREN> expressao() <CLOSE_PAREN>
    | <NOT_LOGIC> <OPEN_PAREN> expressao() <CLOSE_PAREN>
}

void indice(): {}
{
    [ <OPEN_BRACE> expressao() <CLOSE_BRACE> ]
}