/* CompilerTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. CompilerTokenManager.java */
package com.example.compiler_testes;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;

/** Token Manager. */
@SuppressWarnings ("unused")
public class CompilerTokenManager implements CompilerConstants {
    String erroLexico = "";
    int countLexErrors = 0;

    public String getErroLexico() {
        return erroLexico;
    }

    public int foundLexErrors() {
        return countLexErrors;
    }

    void CommentError()
        {
            System.err.println("Error: Multiline comment not closed.");
        }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(1, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(1, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(1, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(1, 0);
      case 33:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 35:
         jjmatchedKind = 59;
         return jjMoveNfa_0(1, 0);
      case 36:
         jjmatchedKind = 60;
         return jjMoveNfa_0(1, 0);
      case 37:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 38:
         jjmatchedKind = 56;
         return jjMoveNfa_0(1, 0);
      case 40:
         jjmatchedKind = 61;
         return jjMoveNfa_0(1, 0);
      case 41:
         jjmatchedKind = 62;
         return jjMoveNfa_0(1, 0);
      case 42:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 43:
         jjmatchedKind = 43;
         return jjMoveNfa_0(1, 0);
      case 44:
         jjmatchedKind = 63;
         return jjMoveNfa_0(1, 0);
      case 45:
         jjmatchedKind = 44;
         return jjMoveNfa_0(1, 0);
      case 46:
         jjmatchedKind = 64;
         return jjMoveNfa_0(1, 0);
      case 47:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x60L);
      case 58:
         jjmatchedKind = 65;
         return jjMoveNfa_0(1, 0);
      case 59:
         jjmatchedKind = 66;
         return jjMoveNfa_0(1, 0);
      case 60:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0xc000000000000L);
      case 61:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L);
      case 62:
         jjmatchedKind = 68;
         return jjMoveStringLiteralDfa1_0(0x30000000000000L);
      case 63:
         jjmatchedKind = 69;
         return jjMoveNfa_0(1, 0);
      case 64:
         jjmatchedKind = 70;
         return jjMoveNfa_0(1, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x9201000L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x832000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x20080000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x180000000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x52000800L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x44000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 91:
         jjmatchedKind = 71;
         return jjMoveNfa_0(1, 0);
      case 93:
         jjmatchedKind = 72;
         return jjMoveNfa_0(1, 0);
      case 96:
         jjmatchedKind = 73;
         return jjMoveNfa_0(1, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x9201000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x832000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x20080000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x180000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x52000800L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000044000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000L);
      case 123:
         jjmatchedKind = 74;
         return jjMoveNfa_0(1, 0);
      case 124:
         jjmatchedKind = 57;
         return jjMoveNfa_0(1, 0);
      case 125:
         jjmatchedKind = 75;
         return jjMoveNfa_0(1, 0);
      case 126:
         jjmatchedKind = 76;
         return jjMoveNfa_0(1, 0);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(1, 0);
   }
   switch(curChar)
   {
      case 37:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 1;
         }
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 1;
         }
         break;
      case 60:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L);
      case 61:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L);
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x52830800L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x20200000L);
      case 79:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100108000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 83:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         break;
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x52830800L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20020200000L);
      case 111:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100108000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10004000000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         break;
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      default :
         break;
   }
   return jjMoveNfa_0(1, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(1, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(1, 1);
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x42001000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 68:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004000L);
      case 76:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x10040000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x810800L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x42001000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 100:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004000L);
      case 108:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10040000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x810800L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x200a0000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(1, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(1, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(1, 2);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 68:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xb0000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x100c00000L);
      case 76:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x21000L);
      case 83:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 89:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 100:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xb0000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100c00000L);
      case 108:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x21000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 115:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 121:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(1, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(1, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(1, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x10420000L);
      case 67:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         break;
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x20800000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x80010000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10420000L);
      case 99:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 4;
         }
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x20800000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x80010000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(1, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(1, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(1, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x80101000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 84:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80101000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 116:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(1, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(1, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(1, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x820000L);
      case 76:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 82:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x820000L);
      case 108:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      default :
         break;
   }
   return jjMoveNfa_0(1, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(1, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(1, 6);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 7;
         }
         break;
      case 84:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x830000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x830000L);
      default :
         break;
   }
   return jjMoveNfa_0(1, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(1, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(1, 7);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 8;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x30000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 8;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x30000L);
      default :
         break;
   }
   return jjMoveNfa_0(1, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(1, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(1, 8);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x30000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x30000L);
      default :
         break;
   }
   return jjMoveNfa_0(1, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(1, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(1, 9);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 10;
         }
         break;
      case 110:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 10;
         }
         else if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(1, 10);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 148;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x8400005affffc9ffL & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     { jjCheckNAdd(0); }
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     { jjCheckNAddStates(0, 12); }
                  }
                  else if (curChar == 39)
                  {
                     if (kind > 88)
                        kind = 88;
                     { jjCheckNAddStates(13, 15); }
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 88)
                        kind = 88;
                     { jjCheckNAddStates(16, 20); }
                  }
                  break;
               case 0:
                  if ((0x8400005affffc9ffL & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(4, 17); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(24, 27); }
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(28, 30); }
                  break;
               case 11:
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(31, 34); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(35, 37); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(21, 34); }
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(38, 41); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(42, 44); }
                  break;
               case 28:
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 48); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(49, 51); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(38, 51); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(52, 55); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(56, 58); }
                  break;
               case 45:
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(63, 65); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(59); }
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(66, 69); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(62); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(70, 73); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(65); }
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(74, 77); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(71, 84); }
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(84); }
                  break;
               case 74:
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(78, 80); }
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(73, 76); }
                  break;
               case 78:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(81, 83); }
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(84, 86); }
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(87, 89); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L && kind > 98)
                     kind = 98;
                  break;
               case 91:
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(84, 86); }
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAddStates(90, 93); }
                  break;
               case 96:
                  if (curChar != 34)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddStates(16, 20); }
                  break;
               case 97:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(97, 98); }
                  break;
               case 98:
                  if (curChar == 34 && kind > 42)
                     kind = 42;
                  break;
               case 99:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(99, 100); }
                  break;
               case 100:
                  if ((0x2400L & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 101:
                  if ((0xfffffffbffffffffL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAdd(101); }
                  break;
               case 102:
                  if (curChar != 39)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAddStates(13, 15); }
                  break;
               case 103:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(103, 104); }
                  break;
               case 104:
                  if (curChar == 39 && kind > 42)
                     kind = 42;
                  break;
               case 105:
                  if ((0xffffff7fffffffffL & l) == 0L)
                     break;
                  if (kind > 88)
                     kind = 88;
                  { jjCheckNAdd(105); }
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAddStates(0, 12); }
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(107); }
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
               case 118:
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(112); }
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(113); }
                  break;
               case 113:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  { jjCheckNAddTwoStates(115, 116); }
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L && kind > 39)
                     kind = 39;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(115); }
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(122); }
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAdd(122); }
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(127); }
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(127, 128); }
                  break;
               case 128:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  { jjCheckNAddTwoStates(130, 131); }
                  break;
               case 130:
                  if ((0x3ff000000000000L & l) != 0L && kind > 87)
                     kind = 87;
                  break;
               case 131:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(130); }
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(94, 96); }
                  break;
               case 133:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(134, 147); }
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(97, 100); }
                  break;
               case 139:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(101, 103); }
                  break;
               case 141:
               case 143:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(104, 107); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     { jjCheckNAddStates(108, 121); }
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 97)
                        kind = 97;
                     { jjCheckNAddStates(122, 125); }
                  }
                  else if ((0xd0000001d0000001L & l) != 0L)
                  {
                     if (kind > 84)
                        kind = 84;
                     { jjCheckNAdd(0); }
                  }
                  if (curChar == 95)
                  {
                     if (kind > 99)
                        kind = 99;
                     { jjCheckNAddStates(126, 129); }
                  }
                  break;
               case 0:
                  if ((0xd0000001d0000001L & l) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAdd(0); }
                  break;
               case 4:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAddStates(130, 132); }
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 97)
                     kind = 97;
                  break;
               case 7:
                  if (curChar == 95)
                     { jjCheckNAddStates(133, 135); }
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(136, 139); }
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(140, 143); }
                  break;
               case 14:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(144, 149); }
                  break;
               case 15:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAdd(15); }
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAddStates(150, 154); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  { jjCheckNAddStates(28, 30); }
                  break;
               case 18:
                  if (curChar != 95)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAddStates(126, 129); }
                  break;
               case 21:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAddStates(155, 157); }
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 99)
                     kind = 99;
                  break;
               case 24:
                  if (curChar == 95)
                     { jjCheckNAddStates(158, 160); }
                  break;
               case 27:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(161, 164); }
                  break;
               case 29:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(165, 168); }
                  break;
               case 31:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(169, 174); }
                  break;
               case 32:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAdd(32); }
                  break;
               case 33:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAddStates(175, 179); }
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAddStates(42, 44); }
                  break;
               case 35:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAddStates(108, 121); }
                  break;
               case 38:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAddStates(180, 182); }
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 41:
                  if (curChar == 95)
                     { jjCheckNAddStates(183, 185); }
                  break;
               case 44:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(186, 189); }
                  break;
               case 46:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(190, 193); }
                  break;
               case 48:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(194, 199); }
                  break;
               case 49:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAdd(49); }
                  break;
               case 50:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAddStates(200, 204); }
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAddStates(56, 58); }
                  break;
               case 54:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddStates(205, 207); }
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 94)
                     kind = 94;
                  break;
               case 57:
                  if (curChar == 95)
                     { jjCheckNAddStates(208, 210); }
                  break;
               case 60:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(211, 214); }
                  break;
               case 63:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(215, 218); }
                  break;
               case 66:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(219, 224); }
                  break;
               case 67:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAdd(67); }
                  break;
               case 68:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddStates(225, 229); }
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 94)
                     kind = 94;
                  { jjCheckNAddStates(230, 232); }
                  break;
               case 72:
                  if (curChar != 95)
                     break;
                  if (kind > 96)
                     kind = 96;
                  { jjCheckNAddTwoStates(73, 76); }
                  break;
               case 73:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(233, 235); }
                  break;
               case 76:
                  if (curChar == 95)
                     { jjAddStates(236, 238); }
                  break;
               case 77:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 79:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 80:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(239, 241); }
                  break;
               case 82:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(242, 246); }
                  break;
               case 83:
                  if (curChar == 95 && kind > 96)
                     kind = 96;
                  break;
               case 84:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 85:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(247, 249); }
                  break;
               case 86:
                  if (curChar == 95)
                     { jjAddStates(250, 251); }
                  break;
               case 90:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(252, 254); }
                  break;
               case 92:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(255, 259); }
                  break;
               case 97:
                  { jjAddStates(260, 261); }
                  break;
               case 99:
                  { jjAddStates(262, 263); }
                  break;
               case 101:
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 103:
                  { jjAddStates(264, 265); }
                  break;
               case 105:
                  if (kind > 88)
                     kind = 88;
                  jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 134:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 135:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(266, 268); }
                  break;
               case 136:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 95)
                     kind = 95;
                  break;
               case 137:
                  if (curChar == 95)
                     { jjCheckNAddStates(269, 271); }
                  break;
               case 140:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(272, 275); }
                  break;
               case 142:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(276, 279); }
                  break;
               case 144:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddStates(280, 285); }
                  break;
               case 145:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAdd(145); }
                  break;
               case 146:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(286, 290); }
                  break;
               case 147:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  { jjCheckNAddStates(101, 103); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 84)
                     kind = 84;
                  { jjCheckNAdd(0); }
                  break;
               case 99:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(262, 263); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 148 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                     kind = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x200L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         return 2;
   }
   return 2;
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\164\162\165\145", "\165\156\164\162\165\145", null, "\53", "\55", "\52", "\57", "\52\52", "\45", 
"\45\45", "\74\74", "\74\74\75", "\76\76\75", "\76\76", "\75\75", "\41\75", "\46", 
"\174", "\41", "\43", "\44", "\50", "\51", "\54", "\56", "\72", "\73", "\74", "\76", 
"\77", "\100", "\133", "\135", "\140", "\173", "\175", "\176", "\75", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   107, 108, 109, 117, 119, 112, 113, 120, 123, 132, 140, 136, 137, 103, 104, 105, 
   97, 98, 99, 100, 101, 3, 4, 17, 9, 10, 6, 7, 10, 6, 7, 10, 
   9, 6, 7, 20, 21, 34, 26, 27, 23, 24, 27, 23, 24, 27, 26, 23, 
   24, 37, 38, 51, 43, 44, 40, 41, 44, 40, 41, 44, 43, 40, 41, 53, 
   54, 69, 59, 60, 56, 57, 60, 62, 56, 57, 60, 65, 56, 57, 73, 75, 
   76, 75, 73, 76, 85, 86, 88, 85, 89, 86, 88, 85, 89, 86, 133, 134, 
   147, 139, 140, 136, 137, 140, 136, 137, 140, 139, 136, 137, 36, 44, 40, 52, 
   60, 56, 70, 73, 85, 86, 94, 76, 57, 41, 2, 10, 6, 7, 19, 27, 
   23, 24, 6, 7, 16, 8, 12, 15, 10, 11, 6, 7, 13, 6, 7, 14, 
   10, 11, 13, 6, 7, 14, 10, 11, 6, 7, 16, 23, 24, 33, 25, 29, 
   32, 27, 28, 23, 24, 30, 23, 24, 31, 27, 28, 30, 23, 24, 31, 27, 
   28, 23, 24, 33, 40, 41, 50, 42, 46, 49, 44, 45, 40, 41, 47, 40, 
   41, 48, 44, 45, 47, 40, 41, 48, 44, 45, 40, 41, 50, 56, 57, 68, 
   58, 63, 67, 60, 61, 56, 57, 64, 56, 57, 66, 60, 61, 64, 56, 57, 
   66, 60, 61, 56, 57, 68, 60, 56, 57, 73, 74, 76, 77, 79, 83, 81, 
   76, 82, 73, 74, 81, 76, 82, 85, 86, 93, 87, 90, 86, 91, 92, 85, 
   86, 91, 92, 93, 97, 98, 99, 100, 103, 104, 136, 137, 146, 138, 142, 145, 
   140, 141, 136, 137, 143, 136, 137, 144, 140, 141, 143, 136, 137, 144, 140, 141, 
   136, 137, 146, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 8)
       {
          jjmatchedKind = 8;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 10)
       {
          jjmatchedKind = 10;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 84 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    System.err.println("Line: " + input_stream.getEndLine() + " Column: " + input_stream.getEndColumn() + " Invalid string found: " + image);
    countLexErrors++;
         break;
      case 85 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     System.err.println("Line: " + input_stream.getEndLine() + " Column: " + input_stream.getEndColumn() + " String constatnt has a \\n: " + image);
     countLexErrors++;
         break;
      case 86 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     erroLexico += "\nErro! Limite de d\u00edgitos para uma constante inteira = 3. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;
    countLexErrors++;
         break;
      case 87 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     erroLexico += "\nErro! Mais de 5 d\u00edgitos antes do ponto. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
         break;
      case 88 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     erroLexico += "\nErro! Literal sem aspas de fechamento. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
         break;
      case 94 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     erroLexico += "\nErro! Identificador com muitos d\u00edgitos. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
         break;
      case 95 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     erroLexico += "\nErro! Identificador come\u00e7ando com d\u00edgito. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
         break;
      case 96 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     erroLexico += "\nErro! Identificador com m\u00faltiplos underscores consecutivos. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
         break;
      case 97 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     erroLexico += "\nErro! Identificador come\u00e7ando com letra min\u00fascula. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
         break;
      case 98 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         erroLexico += "\nErro! Identificador terminando com d\u00edgito. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
         break;
      case 99 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
         erroLexico += "\nErro! Identificador come\u00e7ando com underscore. Lexema: " + matchedToken.image + ", linha " + matchedToken.beginLine + ", coluna " + matchedToken.beginColumn;    countLexErrors++;
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CompilerTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public CompilerTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 148; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "singlelinecomment",
   "multilinecomment",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 2, 1, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffc3fffff801L, 0x3fffL, 
};
static final long[] jjtoSkip = {
   0x7feL, 0xfc1f00000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0xfc1f00000L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[148];
    private final int[] jjstateSet = new int[2 * 148];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
