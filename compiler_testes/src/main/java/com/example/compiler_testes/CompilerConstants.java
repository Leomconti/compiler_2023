/* Generated By:JavaCC: Do not edit this line. CompilerConstants.java */
package com.example.compiler_testes;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 11;
  /** RegularExpression Id. */
  int RESULT = 12;
  /** RegularExpression Id. */
  int AVALIATE = 13;
  /** RegularExpression Id. */
  int DO = 14;
  /** RegularExpression Id. */
  int THIS = 15;
  /** RegularExpression Id. */
  int BODY = 16;
  /** RegularExpression Id. */
  int DESCRIPTION = 17;
  /** RegularExpression Id. */
  int DECLARATION = 18;
  /** RegularExpression Id. */
  int TYPE = 19;
  /** RegularExpression Id. */
  int IS = 20;
  /** RegularExpression Id. */
  int CONSTANT = 21;
  /** RegularExpression Id. */
  int AND = 22;
  /** RegularExpression Id. */
  int VARIABLE = 23;
  /** RegularExpression Id. */
  int DESIGNATE = 24;
  /** RegularExpression Id. */
  int AS = 25;
  /** RegularExpression Id. */
  int READ = 26;
  /** RegularExpression Id. */
  int WRITE = 27;
  /** RegularExpression Id. */
  int ALL = 28;
  /** RegularExpression Id. */
  int REPEAT = 29;
  /** RegularExpression Id. */
  int INTEGER_DEF = 30;
  /** RegularExpression Id. */
  int REAL_DEF = 31;
  /** RegularExpression Id. */
  int LITERAL_DEF = 32;
  /** RegularExpression Id. */
  int LOGIC_DEF = 33;
  /** RegularExpression Id. */
  int INTEGER = 34;
  /** RegularExpression Id. */
  int REAL = 35;
  /** RegularExpression Id. */
  int TRUE = 36;
  /** RegularExpression Id. */
  int UNTRUE = 37;
  /** RegularExpression Id. */
  int LITERAL = 38;
  /** RegularExpression Id. */
  int PLUS = 39;
  /** RegularExpression Id. */
  int MINUS = 40;
  /** RegularExpression Id. */
  int MULTIPLY = 41;
  /** RegularExpression Id. */
  int DIVIDE = 42;
  /** RegularExpression Id. */
  int POWER = 43;
  /** RegularExpression Id. */
  int MODULO = 44;
  /** RegularExpression Id. */
  int DOUBLE_MODULO = 45;
  /** RegularExpression Id. */
  int LESS_THAN = 46;
  /** RegularExpression Id. */
  int LESS_THAN_EQUAL = 47;
  /** RegularExpression Id. */
  int GREATER_THAN_EQUAL = 48;
  /** RegularExpression Id. */
  int GREATER_THAN = 49;
  /** RegularExpression Id. */
  int EQUAL = 50;
  /** RegularExpression Id. */
  int NOT_EQUAL = 51;
  /** RegularExpression Id. */
  int AND_LOGIC = 52;
  /** RegularExpression Id. */
  int OR_LOGIC = 53;
  /** RegularExpression Id. */
  int NOT_LOGIC = 54;
  /** RegularExpression Id. */
  int HASH = 55;
  /** RegularExpression Id. */
  int DOLLAR = 56;
  /** RegularExpression Id. */
  int OPEN_PAREN = 57;
  /** RegularExpression Id. */
  int CLOSE_PAREN = 58;
  /** RegularExpression Id. */
  int COMMA = 59;
  /** RegularExpression Id. */
  int DOT = 60;
  /** RegularExpression Id. */
  int COLON = 61;
  /** RegularExpression Id. */
  int SEMICOLON = 62;
  /** RegularExpression Id. */
  int S_LESS_THAN = 63;
  /** RegularExpression Id. */
  int S_GREATER_THAN = 64;
  /** RegularExpression Id. */
  int QUESTION_MARK = 65;
  /** RegularExpression Id. */
  int AT_SIGN = 66;
  /** RegularExpression Id. */
  int OPEN_BRACKET = 67;
  /** RegularExpression Id. */
  int CLOSE_BRACKET = 68;
  /** RegularExpression Id. */
  int BACKTICK = 69;
  /** RegularExpression Id. */
  int OPEN_BRACE = 70;
  /** RegularExpression Id. */
  int CLOSE_BRACE = 71;
  /** RegularExpression Id. */
  int TILDE = 72;
  /** RegularExpression Id. */
  int EQUALS = 73;
  /** RegularExpression Id. */
  int MAIUSCULA = 74;
  /** RegularExpression Id. */
  int MINUSCULA = 75;
  /** RegularExpression Id. */
  int DIGITO = 76;
  /** RegularExpression Id. */
  int LETRA = 77;
  /** RegularExpression Id. */
  int ASCII = 78;
  /** RegularExpression Id. */
  int ASCII_ASPAS = 79;
  /** RegularExpression Id. */
  int ASCII_APOSTROFO = 80;
  /** RegularExpression Id. */
  int DENTROSEMLINHA = 81;
  /** RegularExpression Id. */
  int SEM_ESTRELA = 82;
  /** RegularExpression Id. */
  int SEM_BARRA = 83;
  /** RegularExpression Id. */
  int INVALID_LEXICAL = 84;
  /** RegularExpression Id. */
  int INVALID_CONST = 85;
  /** RegularExpression Id. */
  int ERROR_INTEGER = 86;
  /** RegularExpression Id. */
  int ERROR_REAL = 87;
  /** RegularExpression Id. */
  int ERROR_LITERAL_END = 88;
  /** RegularExpression Id. */
  int ERROR_IDENTIFICADOR = 89;
  /** RegularExpression Id. */
  int ERROR_IDENTIFICADOR_START_DIGIT = 90;
  /** RegularExpression Id. */
  int ERROR_IDENTIFICADOR_MULTIPLE_UNDERSCORES = 91;
  /** RegularExpression Id. */
  int ERROR_IDENTIFICADOR_END_UNDERSCORE = 92;
  /** RegularExpression Id. */
  int ERROR_IDENTIFICADOR_START_LOWERCASE = 93;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int singlelinecomment = 1;
  /** Lexical state. */
  int multilinecomment = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"/*\"",
    "\"//\"",
    "<token of kind 7>",
    "<token of kind 8>",
    "\"*/\"",
    "<token of kind 10>",
    "<IDENTIFICADOR>",
    "\"result\"",
    "\"avaliate\"",
    "\"do\"",
    "\"this\"",
    "\"body\"",
    "\"description\"",
    "\"declaration\"",
    "\"type\"",
    "\"is\"",
    "\"constant\"",
    "\"and\"",
    "\"variable\"",
    "\"designate\"",
    "\"as\"",
    "\"read\"",
    "\"write\"",
    "\"all\"",
    "\"repeat\"",
    "\"integer\"",
    "\"real\"",
    "\"literal\"",
    "\"logic\"",
    "<INTEGER>",
    "<REAL>",
    "\"true\"",
    "\"untrue\"",
    "<LITERAL>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"%%\"",
    "\"<<\"",
    "\"<<=\"",
    "\">>=\"",
    "\">>\"",
    "\"==\"",
    "\"!=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"#\"",
    "\"$\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\";\"",
    "\"<\"",
    "\">\"",
    "\"?\"",
    "\"@\"",
    "\"[\"",
    "\"]\"",
    "\"`\"",
    "\"{\"",
    "\"}\"",
    "\"~\"",
    "\"=\"",
    "<MAIUSCULA>",
    "<MINUSCULA>",
    "<DIGITO>",
    "<LETRA>",
    "<ASCII>",
    "<ASCII_ASPAS>",
    "<ASCII_APOSTROFO>",
    "<DENTROSEMLINHA>",
    "<SEM_ESTRELA>",
    "<SEM_BARRA>",
    "<INVALID_LEXICAL>",
    "<INVALID_CONST>",
    "<ERROR_INTEGER>",
    "<ERROR_REAL>",
    "<ERROR_LITERAL_END>",
    "<ERROR_IDENTIFICADOR>",
    "<ERROR_IDENTIFICADOR_START_DIGIT>",
    "<ERROR_IDENTIFICADOR_MULTIPLE_UNDERSCORES>",
    "<ERROR_IDENTIFICADOR_END_UNDERSCORE>",
    "<ERROR_IDENTIFICADOR_START_LOWERCASE>",
  };

}
